---
title: "Elezioni Emilia-Romagna"
author: "Luca Fornasari"
date: "`r Sys.Date()`"
format: 
  html:
    self-contained: true
---

Questo report contiene i risultati di una simulazione delle prossime elezioni
del Consiglio della Regione Emilia-Romagna, ottenuti
partendo dai risultati delle elezioni europee 2024.
Vengono eseguite 1000 simulazioni, in ciascuna di esse le percentuali che ciascuna
lista ha preso alle elezioni europee in ciascuna provincia 
vengono aumentate o diminuite casualmente di una quantità che sia coerente
con la variabilità che ha avuto nel passato la percentuale di quella lista.
Per i dettagli vedere in fondo negli approfondimenti.

Avverto che ho fatto questa simulazione per curiosità e non per lavoro, e che
potrebbero essermi sfuggiti degli errori nel processo di
simulazione, i risultati vanno dunque presi senza alcuna garanzia di
accuratezza.

Segnalazioni, richieste e suggerimenti a <fornaeffe@gmail.com> o sul repository
<https://github.com/fornaeffe/elezioni-EMR>.

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = FALSE)

library(data.table)
library(stringr)
library(readxl)
library(parallel)
library(kableExtra)
library(zoo)

data_elezione <- as.POSIXct("2024-11-17")

```

```{r distribuzione voti}
#| include: false
#| cache: true
#### Importazione dati ####

##### Base dati #####

# TODO usare una base dati più aggiornata, soprattutto per quanto riguarda
# la popolazione

importa_dati <- function() {
  base_dati <- read.csv2(
    "dati/BaseDati_Proposta_Commissione.csv",
    fileEncoding = "utf-8",
    na.strings = ""
  )
  
  
  # Rinomino le colonne per coerenza con le altre fonti
  names(base_dati)[names(base_dati) == "DEN_PRO_CM20"] <- "PROVINCIA"
  names(base_dati)[names(base_dati) == "DEN_COM20"] <- "COMUNE"
  
  # Trasformo in maiuscolo per coerenza
  base_dati$PROVINCIA <- toupper(base_dati$PROVINCIA)
  base_dati$COMUNE <- toupper(base_dati$COMUNE)
  
  # Ottengo l'elenco delle province
  province <- aggregate(
    POP_2011 ~ PROVINCIA,
    base_dati,
    sum
  )
  
  # Ottengo l'elenco dei comuni
  comuni <- unique(base_dati[, c("PROVINCIA", "COMUNE")])
  
  ##### Politiche 2018 #####
  
  # Carico i dati delle elezioni politiche del 2018
  camera_2018 <- read.csv2(
    "dati/2018/camera-20180304_2.txt",
    fileEncoding = "utf-8"
  )
  
  # Collego ciascun collegio uninominale alla provincia di riferimento
  # TODO: sarebbe più opportuno svolgere questa operazione comune per comune,
  # ma ci sono troppe differenze tra i nomi dei comuni nei dati delle politiche
  # 2018 e i nomi dei comuni nella base dati
  camera_2018$COMUNE_COLLEGIO <- str_remove(camera_2018$COLLEGIOUNINOMINALE, "\\A[0-9]{2} (- )?")
  camera_2018$COMUNE_COLLEGIO <- str_remove(camera_2018$COMUNE_COLLEGIO, " - .*\\Z")
  camera_2018$COMUNE_COLLEGIO <- str_remove(camera_2018$COMUNE_COLLEGIO, " AREA STATISTICA .*\\Z")
  
  camera_2018 <- merge(
    camera_2018,
    comuni,
    by.x = "COMUNE_COLLEGIO",
    by.y = "COMUNE",
    all.x = TRUE
  )
  
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == ""] <- "AOSTA"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "BOLZANO/BOZEN"] <- "BOLZANO"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "BRESSANONE/BRIXEN"] <- "BOLZANO"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "CANT+"] <- "COMO"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "CORIGLIANO CALABRO"] <- "COSENZA"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "FORL¦"] <- "FORLI'-CESENA"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "MERANO/MERAN"] <- "BOLZANO"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "NARDÊ"] <- "LECCE"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "PATERNÊ"] <- "CATANIA"
  camera_2018$PROVINCIA[camera_2018$COMUNE_COLLEGIO == "SAN DONA' DI PIAVE"] <- "VENEZIA"
  
  # Checks
  # TO DO: trasformare in un controllo che innesca un errore
  setdiff(unique(camera_2018$PROVINCIA), province$PROVINCIA)
  sum(is.na(camera_2018$PROVINCIA))
  
  
  ##### Politiche 2022 #######
  
  # Carico l'anagrafica dei comuni e la formatto coerentemente con gli altri dati
  anagrafica_comuni <- read.csv("dati/2022/camera-italia-comune_anagrafica.csv")
  anagrafica_comuni <- anagrafica_comuni[, c(
    "codice",
    "desc_com",
    "desc_prov",
    "desc_circ",
    "ele_t",
    "vot_t"
  )]
  names(anagrafica_comuni) <- c(
    "codice",
    "COMUNE",
    "PROVINCIA",
    "CIRCOSCRIZIONE",
    "ELETTORI",
    "VOTANTI"
  )
  
  # Carico i dati elettorali per comune
  camera_2022 <- read.csv("dati/2022/camera-italia-comune.csv")
  
  # Aggiungo i dati relativi ai comuni
  camera_2022 <- merge(
    camera_2022,
    anagrafica_comuni
  )
  
  # Rinomino le colonne
  names(camera_2022)[names(camera_2022) == "desc_lis"] <- "LISTA"
  names(camera_2022)[names(camera_2022) == "voti"] <- "VOTI_LISTA"
  names(camera_2022)[names(camera_2022) == "cogn"] <- "COGNOME"
  names(camera_2022)[names(camera_2022) == "nome"] <- "NOME"
  
  # Rinomino alcune province, per coerenza
  camera_2022$PROVINCIA[camera_2022$PROVINCIA == "REGGIO NELL' EMILIA"] <- "REGGIO NELL'EMILIA"
  camera_2022$PROVINCIA[camera_2022$PROVINCIA == "MASSA-CARRARA"] <- "MASSA CARRARA"
  
  
  # Distribuisco i voti al solo candidato proporzionalmente tra le liste
  # che lo sostengono
  camera_2022 <- merge(
    camera_2022,
    aggregate(
      VOTI_LISTA ~
        codice +
        COGNOME +
        NOME,
      camera_2022,
      sum
    ),
    by = c("codice", "COGNOME", "NOME"),
    suffixes = c("", "_TOT")
  )
  
  camera_2022$VOTI_LISTA <- 
    camera_2022$VOTI_LISTA +
    camera_2022$voti_solo_can * 
    camera_2022$VOTI_LISTA / camera_2022$VOTI_LISTA_TOT
  
  
  camera_2022 <- camera_2022[,c(
    "CIRCOSCRIZIONE",
    "PROVINCIA",
    "COMUNE",
    "ELETTORI",
    "VOTANTI",
    "COGNOME",
    "NOME",
    "LISTA",
    "VOTI_LISTA"
  )]
  
  
  
  ###### Trovo la regione #######
  
  camera_2018$REGIONE <- str_remove(camera_2018$CIRCOSCRIZIONE, " [0-9]\\Z")
  camera_2018$REGIONE <- str_remove(camera_2018$REGIONE, "/.*")
  camera_2018$ELEZIONE <- "camera_2018"
  
  camera_2022$REGIONE <- str_remove(camera_2022$CIRCOSCRIZIONE, " [0-9]\\Z")
  camera_2022$REGIONE <- str_remove(camera_2022$REGIONE, "/.*")
  camera_2022$ELEZIONE <- "camera_2022"
  
  ##### Amministrative #####
  
  lista_files <- list.files("dati/eur_reg")
  
  lista_dataframes <- lapply(
    paste0("dati/eur_reg/", lista_files),
    read.csv2,
    fileEncoding = "utf-8"
  )
  
  lista_dataframes <- mapply(
    function(df, nome_file) {
      names(df) <- toupper(names(df))
      if (is.null(df$COGNOME)) df$COGNOME <- NA
      if (is.null(df$NOME)) df$NOME <- NA
      names(df)[names(df) == "VOTILISTA"] <- "VOTI_LISTA"
      df <- df[,c(
        "REGIONE",
        "PROVINCIA",
        "COMUNE",
        "ELETTORI",
        "VOTANTI",
        "COGNOME",
        "NOME",
        "LISTA",
        "VOTI_LISTA"
      )]
      df$ELEZIONE <- nome_file
      df
    },
    df = lista_dataframes,
    nome_file = lista_files,
    SIMPLIFY = FALSE
  )
  
  amministrative <- rbindlist(lista_dataframes)
  lista_dataframes <- NULL
  
  # Rinomino alcune province
  amministrative$PROVINCIA[amministrative$PROVINCIA == "REGGIO NELL' EMILIA"] <- "REGGIO NELL'EMILIA"
  amministrative$PROVINCIA[amministrative$PROVINCIA == "MASSA-CARRARA"] <- "MASSA CARRARA"
  
  # Checks
  # TO DO: trasformare in un controllo che innesca un errore
  setdiff(unique(amministrative$PROVINCIA), province$PROVINCIA)
  
  
  ##### Unisco i dati #####
  
  comuni_liste_elezioni <- rbindlist(
    lapply(
      list(
        amministrative,
        camera_2018,
        camera_2022
      ),
      function(df) df[, c(
        "REGIONE",
        "PROVINCIA",
        "COMUNE",
        "ELETTORI",
        "VOTANTI",
        "LISTA",
        "VOTI_LISTA",
        "ELEZIONE"
      )]
    )
  )
  
  
  ###### Calcolo astensione ######
  
  calcola_astensione <- function(df) {
    astensione <- aggregate(
      VOTI_LISTA ~
        REGIONE +
        PROVINCIA +
        COMUNE +
        ELETTORI +
        VOTANTI +
        ELEZIONE,
      df,
      sum
    )
    
    astensione$LISTA <- "astensione"
    astensione$VOTI_LISTA <- astensione$ELETTORI - astensione$VOTI_LISTA
    
    astensione
  }
  
  comuni_liste_elezioni <- rbind(
    comuni_liste_elezioni,
    calcola_astensione(comuni_liste_elezioni)
  )
  
  province_liste_elezioni <- aggregate(
    VOTI_LISTA ~
      REGIONE +
      PROVINCIA +
      LISTA +
      ELEZIONE,
    comuni_liste_elezioni,
    sum
  )
  
  ##### Filtro (solo Emilia-Romagna) #####
  
  dati_precedenti <- province_liste_elezioni[province_liste_elezioni$REGIONE == "EMILIA-ROMAGNA", ]
  province <- province[province$PROVINCIA %in% dati_precedenti$PROVINCIA, ]
  
  ##### Dati Europee 2024 ####
  # Workaround finché non arriveranno gli open data
  
  e24_prov_liste <- read_xlsx("dati/liste.xlsx", "europee")
  
  e24_prov_liste$REGIONE = "EMILIA_ROMAGNA"
  e24_prov_liste$ELEZIONE = "europee2024"
  
  e24_prov <- aggregate(
    VOTI_LISTA ~
      REGIONE +
      PROVINCIA +
      ELEZIONE,
    e24_prov_liste,
    sum
  )
  
  e24_prov <- merge(
    e24_prov,
    read_xlsx("dati/popolazione.xlsx")
  )
  
  e24_prov$VOTI_LISTA <- e24_prov$ELETTORI - e24_prov$VOTI_LISTA
  e24_prov$LISTA <- "astensione"
  e24_prov$ELETTORI <- NULL
  
  dati_precedenti <- rbind(
    dati_precedenti,
    e24_prov_liste,
    e24_prov
  )
  
  return(list(province = province, dati_precedenti = dati_precedenti))
}

dati <- importa_dati()

prov_lista_elezione <- dati$dati_precedenti
province <- dati$province
```


```{r corrispondenza}
# Questo è servito per esportare i nomi delle liste
write.csv2(
  dati$prov_lista_elezione[!duplicated(dati$prov_lista_elezione$LISTA), ],
  "_output/liste_precedenti_elezioni.csv",
  fileEncoding = "utf-8"
)

##### Corrispondenza liste - aree #####

# Carico la tabella di corrispondenza tra liste e partiti, e la appiattisco

corrispondenza_liste <- as.data.table(read_xlsx("dati/corrispondenza_liste.xlsx"))
corrispondenza_liste[is.na(corrispondenza_liste)] <- 0

corrispondenza_liste <- melt(
  corrispondenza_liste,
  c("LISTA_ORIGINALE", "ELEZIONE"),
  variable.name = "LISTA",
  value.name = "FATTORE"
)

corrispondenza_liste <- corrispondenza_liste[corrispondenza_liste$FATTORE > 0, ]


# Unisco questa ai dati precedenti, e calcolo i voti per le nuove liste

names(prov_lista_elezione)[names(prov_lista_elezione) == "LISTA"] <- "LISTA_ORIGINALE"

corrispondenza_liste$ELEZIONE <- NULL

prov_lista_elezione <- merge(
  prov_lista_elezione,
  corrispondenza_liste,
  allow.cartesian = TRUE
)

prov_lista_elezione$VOTI_LISTA <- prov_lista_elezione$VOTI_LISTA * prov_lista_elezione$FATTORE

prov_lista_elezione <- aggregate(
  VOTI_LISTA ~ PROVINCIA + ELEZIONE + LISTA,
  prov_lista_elezione,
  sum
)
```


```{r serie storica}

elezioni <- unique(prov_lista_elezione$ELEZIONE)

date_elezioni <- sapply(elezioni, function(x) {
  if (x == "camera_2018") return(as.POSIXct("2018-03-04"))
  
  if (x == "camera_2022") return(as.POSIXct("2022-09-25"))
  
  if (x == "europee2024") return(as.POSIXct("2024-06-09"))
  
  return(as.POSIXct(substr(x, nchar(x)-11, nchar(x)-4), format = "%Y%m%d"))
})

df_elezioni <- data.frame(ELEZIONE = elezioni, DATA = as.POSIXct(date_elezioni))


prov_lista_elezione <- merge(
  prov_lista_elezione,
  aggregate(
    VOTI_LISTA ~ PROVINCIA + ELEZIONE,
    prov_lista_elezione, 
    sum
  ),
  by = c("PROVINCIA", "ELEZIONE"),
  suffixes = c("", "_PROV")
)

prov_lista_elezione$PERCENTUALE <-
  prov_lista_elezione$VOTI_LISTA / prov_lista_elezione$VOTI_LISTA_PROV

prov_lista_elezione$LOG_P <- qlogis(prov_lista_elezione$PERCENTUALE)


lista_elezione <- aggregate(
  VOTI_LISTA ~ LISTA + ELEZIONE,
  prov_lista_elezione,
  sum
)

lista_elezione <- merge(
  lista_elezione,
  aggregate(
    VOTI_LISTA ~ ELEZIONE,
    lista_elezione,
    sum
  ),
  by = "ELEZIONE",
  suffixes = c("", "_REG")
)

lista_elezione$PERCENTUALE <- 
  lista_elezione$VOTI_LISTA / lista_elezione$VOTI_LISTA_REG

lista_elezione$LOG_P <- qlogis(lista_elezione$PERCENTUALE)



lista_elezione <- merge(
  lista_elezione,
  df_elezioni[, c("ELEZIONE", "DATA")]
)


```


```{r sigma}
SIGMA_R <- tapply(lista_elezione, lista_elezione$LISTA, function(df) {
  df <- df[order(df$DATA),]
  
  return(sd(diff(df$LOG_P) / unclass(diff(df$DATA))))
})

liste <- data.frame(
  LISTA = names(SIGMA_R),
  SIGMA_R = SIGMA_R
)

prov_lista_elezione <- merge(
  prov_lista_elezione,
  lista_elezione[, c("LISTA", "ELEZIONE", "LOG_P")],
  by = c("LISTA", "ELEZIONE"),
  suffixes = c("", "_REG")
)

prov_lista_elezione$DELTA <- 
  prov_lista_elezione$LOG_P - prov_lista_elezione$LOG_P_REG

prov_lista_elezione <- merge(
  prov_lista_elezione,
  df_elezioni[, c("ELEZIONE", "DATA")]
)

SIGMA_P <- tapply(prov_lista_elezione, prov_lista_elezione$LISTA, function(df) {
  sd(unlist(tapply(df, df$PROVINCIA, function(df) {
    df <- df[order(df$DATA),]
    return(diff(df$LOG_P) / unclass(diff(df$DATA)))
  })))
})

stopifnot(all.equal(names(SIGMA_P), liste$LISTA))

liste$SIGMA_P <- SIGMA_P

liste$SIGMA_R[is.na(liste$SIGMA_R)] <- mean(liste$SIGMA_R, na.rm = TRUE)
liste$SIGMA_P[is.na(liste$SIGMA_P)] <- mean(liste$SIGMA_P, na.rm = TRUE)


```

```{r dati}
#| include: false
#| cache: true

##### Carico liste regionali #####

liste_coal <- read_xlsx("dati/liste.xlsx")

stopifnot(setequal(liste$LISTA, c(liste_coal$LISTA, "astensione")))

liste <- merge(liste, liste_coal, all.x = TRUE)

lista_elezione <- lista_elezione[order(lista_elezione$DATA, decreasing = TRUE),]

liste$LOG_P <- NA
liste$DATA <- as.POSIXct(NA)
for (l in 1:nrow(liste)) {
  liste$LOG_P[l] <- lista_elezione$LOG_P[lista_elezione$LISTA == liste$LISTA[l]][1]
  liste$DATA[l] <- lista_elezione$DATA[lista_elezione$LISTA == liste$LISTA[l]][1]
}
# 
# liste <- merge(
#   liste,
#   lista_elezione[lista_elezione$ELEZIONE == "europee2024", c("LISTA", "LOG_P")],
#   all.x = TRUE
# )

# 
# 
# liste$LOG_P[liste$LISTA == "DE PASCALE"] <- lista_elezione$LOG_P[
#   lista_elezione$ELEZIONE == "regionali-20200126.txt" &
#     lista_elezione$LISTA == "DE PASCALE"
# ]

prov_lista <- prov_lista_elezione[,
  c("LISTA", "PROVINCIA", "DELTA", "VOTI_LISTA_PROV", "DATA")
]
prov_lista <- prov_lista[order(prov_lista$DATA, decreasing = TRUE),]
prov_lista <- prov_lista[!duplicated(interaction(prov_lista$LISTA, prov_lista$PROVINCIA)),]

# prov_lista <- rbind(
#   prov_lista,
#   prov_lista_elezione[
#     prov_lista_elezione$ELEZIONE == "regionali-20200126.txt" &
#     prov_lista_elezione$LISTA == "DE PASCALE",
#     c("LISTA", "PROVINCIA", "DELTA", "VOTI_LISTA_PROV")
#   ]
# )

## FIX!

prov_lista <- prov_lista[order(prov_lista$PROVINCIA, prov_lista$LISTA),]

prov_lista$VOTI_LISTA_PROV[prov_lista$LISTA == "DE PASCALE"] <-
  prov_lista$VOTI_LISTA_PROV[prov_lista$LISTA == "PARTITO DEMOCRATICO"]

liste$DATA <- max(df_elezioni$DATA)
prov_lista$DATA <- max(df_elezioni$DATA)

## END FIX

prov_lista <- merge(
  prov_lista,
  liste[, c("LISTA", "SIGMA_P")]
)



```

```{r simula}
#| include: false
#| cache: true

# delta_t <- data_elezione - max(df_elezioni$DATA)

simula <- function(
    iterazioni = 200
) {
  
  iterazione <- function(
    iter = 1,
    liste,
    prov_lista,
    province,
    data_elezione
  ) {
    #### Simulazione percentuali regionali ####
    liste$LOG_P_ITER <- rnorm(
      liste$LOG_P,
      liste$LOG_P,
      liste$SIGMA_R * (data_elezione - liste$DATA)
    )
    
    #### Simulazione percentuali per provincia ####
    prov_lista <- merge(
      prov_lista,
      liste[, c("LISTA", "LOG_P_ITER")]
    )
    
    names(prov_lista)[names(prov_lista) == "LOG_P_ITER"] <- "LOG_P_ITER_R"
    
    prov_lista$DELTA_ITER <- rnorm(
      prov_lista$DELTA,
      prov_lista$DELTA,
      prov_lista$SIGMA_P * (data_elezione - prov_lista$DATA)
    )
    
    prov_lista$LOG_P_ITER <- prov_lista$LOG_P_ITER_R + prov_lista$DELTA_ITER
    
    prov_lista$PERCENTUALE_ITER <- ave(
      prov_lista$LOG_P_ITER,
      prov_lista$PROVINCIA,
      FUN = function(x) plogis(x) / sum(plogis(x))
    )
    
    
    prov_lista$VOTI_LISTA_ITER <- prov_lista$VOTI_LISTA_PROV * prov_lista$PERCENTUALE_ITER
    
    scrutinio <- Scrutinio(
      prov_lista[, c(
        "PROVINCIA",
        "LISTA",
        "VOTI_LISTA_ITER"
      )],
      province,
      liste[, c(
        "COALIZIONE",
        "LISTA"
      )]
    )
    
    scrutinio$prov_lista <- merge(
      scrutinio$prov_lista,
      prov_lista[, c(
        "PROVINCIA",
        "LISTA",
        "VOTI_LISTA_ITER"
      )]
    )
    
    scrutinio$prov_lista <- merge(
      scrutinio$prov_lista,
      aggregate(
        VOTI_LISTA_ITER ~ PROVINCIA,
        scrutinio$prov_lista,
        sum
      ),
      by = "PROVINCIA",
      suffixes = c("", "_TOT")
    )
    
    scrutinio$prov_lista$PERCENTUALE <-
      scrutinio$prov_lista$VOTI_LISTA_ITER / 
      scrutinio$prov_lista$VOTI_LISTA_ITER_TOT
    
    astensione <- prov_lista[
      prov_lista$LISTA == "astensione", 
      c("LISTA", "PROVINCIA", "VOTI_LISTA_ITER")
    ]
    
    scrutinio$liste <- merge(
      liste[, c(
        "COALIZIONE",
        "LISTA"
      )],
      aggregate(
        cbind(ELETTI, VOTI_LISTA_ITER) ~ LISTA,
        scrutinio$prov_lista,
        sum
      )
    )
    
    scrutinio$liste$PERCENTUALE <-
      scrutinio$liste$VOTI_LISTA_ITER / 
      sum(scrutinio$liste$VOTI_LISTA_ITER)
    
    scrutinio$coalizioni <- merge(
      scrutinio$coalizioni,
      aggregate(
        cbind(VOTI_LISTA_ITER, ELETTI) ~ COALIZIONE,
        scrutinio$liste,
        sum
      )
    )
    
    scrutinio$coalizioni$PERCENTUALE <-
      scrutinio$coalizioni$VOTI_LISTA_ITER / 
      sum(scrutinio$coalizioni$VOTI_LISTA_ITER)
    
    scrutinio$coalizioni$ELETTI_TOT <-
      scrutinio$coalizioni$PRESIDENTE +
      scrutinio$coalizioni$MIGLIOR_PERDENTE +
      scrutinio$coalizioni$ELETTI
    
    
    
    
    list(
      coalizioni = scrutinio$coalizioni,
      liste = scrutinio$liste,
      prov_lista = scrutinio$prov_lista
    )
    
  }
  
  cl <- makeCluster(parallel::detectCores())
  
  clusterEvalQ(
    cl,
    source("scrutinio.R")
  )
  
  lista_risultati <- parLapply(
    cl,
    seq_len(iterazioni),
    iterazione,
    liste = liste,
    prov_lista = prov_lista,
    province = province,
    data_elezione = data_elezione
  )
  
  stopCluster(cl)
  
  risultato <- list()
  
  risultato$coalizioni <-
    rbindlist(lapply(lista_risultati, function(l) l$coalizioni), idcol = "SIM")
  risultato$liste <-
    rbindlist(lapply(lista_risultati, function(l) l$liste), idcol = "SIM")
  risultato$prov_lista <-
    rbindlist(lapply(lista_risultati, function(l) l$prov_lista), idcol = "SIM")
  
  lista_risultati <- NULL
  
  risultato
}

risultato <- simula(1000)

```

```{r prep_grafici}
liste$COLORE[is.na(liste$COLORE)] <- "#DDDDDD"

risultato$liste <- merge(
  risultato$liste,
  liste[, c("LISTA", "COLORE")]
)

coalizioni <- liste[!duplicated(liste$COALIZIONE), c("COALIZIONE", "COLORE")]

risultato$coalizioni <- merge(
  risultato$coalizioni,
  coalizioni
)

risultato$liste$PERCENTUALE <- formattable::percent(risultato$liste$PERCENTUALE, 2)


```

## Dati

```{r}
kbl(
    liste[liste$COLORE != "#DDDDDD", c("COALIZIONE", "LISTA")],
    col.names = c("COALIZIONE", "LISTA"),
    caption = "Liste",
    row.names = FALSE
  ) %>%
    kable_minimal()
```



## Risultati



### Percentuali per lista

Questo grafico mostra le percentuali simulate per ciascuna 
lista.

```{r ris_per_partito}

par(mar=c(4, 12, 0.1, 0.1))

boxplot(
  PERCENTUALE * 100 ~ LISTA, 
  data = droplevels(risultato$liste[risultato$liste$COLORE != "#DDDDDD"]), 
  horizontal = TRUE, 
  las=1,
  xlab = "Percentuale sui voti validi",
  ylab = NA,
  col = liste$COLORE[liste$COLORE != "#DDDDDD"],
  cex.axis = 0.8
  )


```

### Coalizioni vincenti

```{r vincenti}

vittoria <- aggregate(
      PRESIDENTE ~ COALIZIONE,
      risultato$coalizioni,
      mean
    )

vittoria$PRESIDENTE <- formattable::percent(vittoria$PRESIDENTE, 0)


kbl(
    vittoria[vittoria$PRESIDENTE > 0,],
    col.names = c("COALIZIONE", "Prob."),
    caption = "Probabilità di vittoria",
    row.names = FALSE
  ) %>%
    kable_minimal()


```


### Composizione media del Consiglio Regionale

```{r plot_parlamento}
#| warning: false 


library(ggplot2)
library(ggpol)
source("scrutinio.R")

disegna_parlamento <- function() {
  
  eletti <- aggregate(
    ELETTI ~ LISTA + COLORE + COALIZIONE,
    risultato$liste,
    mean
  )
  eletti$SEGGI <- Hare.Niemeyer(eletti$ELETTI, 48)
  eletti$Gruppo <- eletti$LISTA
  eletti <- eletti[order(eletti$COALIZIONE), ]
  
  pres <- aggregate(
    PRESIDENTE ~ COALIZIONE + COLORE,
    risultato$coalizioni,
    mean
  )
  pres$SEGGI <- 0
  pres$SEGGI[order(pres$PRESIDENTE, decreasing = TRUE)[1]] <- 1
  pres$Gruppo <- paste("Pres.", pres$COALIZIONE)
  pres$COLORE <- 
    adjustcolor(pres$COLORE, alpha.f = 0.5)
  
  miglior_perdente <- aggregate(
    MIGLIOR_PERDENTE ~ COALIZIONE + COLORE,
    risultato$coalizioni,
    mean
  )
  miglior_perdente$SEGGI <- 0
  miglior_perdente$SEGGI[order(miglior_perdente$MIGLIOR_PERDENTE, decreasing = TRUE)[1]] <- 1
  miglior_perdente$Gruppo <- paste("Cand. pres.", miglior_perdente$COALIZIONE)
  miglior_perdente$COLORE <- 
    adjustcolor(miglior_perdente$COLORE, alpha.f = 0.5)
  
  
  parlamento <- rbind(
    pres[, c("Gruppo", "SEGGI", "COLORE")],
    miglior_perdente[, c("Gruppo", "SEGGI", "COLORE")],
    eletti[, c("Gruppo", "SEGGI", "COLORE")]
  )
  
  
  parlamento <- parlamento[parlamento$SEGGI > 0, ]
  
  ggplot(parlamento) +
    geom_parliament(aes(seats = SEGGI, fill = Gruppo), color = "black") +
    scale_fill_manual(values = parlamento$COLORE, labels = paste(
      parlamento$Gruppo,
      "-",
      parlamento$SEGGI
    )) +
    coord_fixed() +
    theme_void()
}

disegna_parlamento()

```

### Probabilità di eleggere qualcuno

```{r}
superamento_soglia <- function() {
  
  soglie <- aggregate(
    ELETTI ~ LISTA,
    risultato$liste,
    function(x) mean(x > 0)
  )
  soglie <- soglie[soglie$LISTA %in% liste$LISTA[liste$COLORE != "#DDDDDD"],]
  soglie$SOGLIA <- formattable::percent(soglie$ELETTI, 0)
  kbl(
    soglie[, c("LISTA", "SOGLIA")],
    col.names = c("LISTA", "Prob."),
    caption = "Prob. di eleggere qualcuno",
    row.names = FALSE
  ) %>%
    kable_minimal()
}

superamento_soglia()

```

### Numero di seggi rispetto alle percentuali ottenute
```{r}
#| results: hide


tapply(
  risultato$liste[risultato$liste$COLORE != "#DDDDDD"],
  risultato$liste$LISTA[risultato$liste$COLORE != "#DDDDDD"],
  function(df) {
    plot(
      ELETTI ~ I(PERCENTUALE*100),
      data = df,
      col = COLORE,
      xlab = "Percentuale sui voti validi",
      main = df$LISTA[1]
    )
  }
)


```

```{r}

grafico_eletti <- function(lista) {
  lp <- risultato$liste[risultato$liste$LISTA == lista]
  
  nmax <- factor(
      lp$ELETTI
    )
  colori <- colorRampPalette(
    c(
      "#000000",
      liste$COLORE[liste$LISTA == lista],
      "#FFFFFF"
    )
  )(length(levels(nmax)))
  tab <- spineplot(
    nmax ~ I(
      lp$PERCENTUALE*100
    ),
    breaks = 12,
    col = colori,
    yaxlabels = NA,
    ylab = NA,
    xlab = "Percentuale dei voti validi",
    main = lista
  )
  
  # From https://stackoverflow.com/questions/74814855/how-can-i-plot-data-labels-over-spineplot-in-r
  nums <- t(apply(tab, 1,rev))
  pcts <- prop.table(cbind(0, nums), 1)
  pcts <- t(apply(pcts, 1, cumsum))
  yvals <- pcts[,-ncol(pcts)] + (pcts[,-1] - pcts[,-ncol(pcts)])/2
  xvals <- cumsum(c(0, rowSums(nums)/sum(rowSums(nums))))
  xvals <- xvals[-length(xvals)] + (xvals[-1] - xvals[-length(xvals)])/2
  xvals <- array(xvals, dim=dim(yvals))
  xvals <- c(xvals)
  yvals <- c(yvals)
  labs <- rep(colnames(nums), each = nrow(nums))
  
  text(x = xvals[nums > 5], y = yvals[nums > 5], labels = labs[nums > 5])
  
  # legend(
  #   "topleft",
  #   legend = levels(nmax),
  #   fill = rev(colori),
  #   title = "Eletti"
  # )
}

for (lista in liste$LISTA[liste$COLORE != "#DDDDDD"]) grafico_eletti(lista)
```



#### Per coalizione
```{r}
par(mar = c(5, 4, 0, 0))
plot(
  ELETTI ~ I(PERCENTUALE*100), 
  data = risultato$coalizioni, 
  col = COLORE,
  xlab = "Percentuale sui voti validi"
)
legend(
  "bottomright", 
  legend = coalizioni$COALIZIONE[coalizioni$COLORE != "#DDDDDD"], 
  col = coalizioni$COLORE[coalizioni$COLORE != "#DDDDDD"],
  pch = 1
)
```


### Probabilità di elezione per ciascuna posizione nelle province

```{r results='asis'}
disegna_tabella_prob <- function(lista) {
  lp <- risultato$prov_lista
  lp <- lp[lp$LISTA == lista, ]
  lp$ELETTI <- factor(lp$ELETTI, levels = 0:9)
  tbl <- table(lp$PROVINCIA, lp$ELETTI)
  tbl2 <- t(apply(
    tbl,
    1,
    function(x) {
      rev(cumsum(rev(x[2:10]))) / sum(x)
    }
  ))
  
  tbl2 <- as.data.frame(tbl2)
  for (i in 1:9) {
    tbl2[,i] <- formattable::percent(tbl2[, i], 1)
  }
  
  kb <- kbl(tbl2, caption = lista) %>%
    kable_minimal()
  
  valori_hsv <- rgb2hsv(col2rgb(liste$COLORE[liste$LISTA == lista]))
  
  for (i in 1:9) {
    kb <- column_spec(
      kb,
      i+1,
      background = hsv(
        valori_hsv["h", 1], 
        valori_hsv["s", 1]*tbl2[,i], 
        1
      )
    )
  }
  kb
}


for (lista in liste$LISTA[liste$LISTA != "astensione" & liste$COLORE != "#DDDDDD"]) {
  print(disegna_tabella_prob(lista))
}

```


### Probabilità di elezione in base alla posizione nel listino


```{r plot_nmax}
#| fig.width: 8
#| fig-height: 8
#| dpi: 100

grafico_nmax <- function(lista, provincia = NA) {
  if (is.na(provincia)) {
    lp <- risultato$prov_lista
  } else {
    lp <- risultato$prov_lista[
      risultato$prov_lista$PROVINCIA == provincia,
    ]
  }
  
  nmax <- factor(
      lp$ELETTI[lp$LISTA == lista],
      levels = 0:9
    )
  # nmax[is.na(nmax)] <- 4
  colori <- c(hcl.colors(9), "#FFFFFF")
  spineplot(
    nmax ~ I(
      lp$PERCENTUALE[
        lp$LISTA == lista
      ] *100
    ),
    breaks = 12,
    col = colori,
    yaxlabels = NA,
    ylab = NA,
    xlab = "Percentuale nella provincia",
    main = paste0(
      lista,
      ifelse(is.na(provincia), "", paste0(" - ", provincia))
    )
  )
  
  legend(
    "topleft",
    legend = levels(nmax)[-1],
    fill = rev(colori[-10]),
    title = "Posizione"
  )
}

grafico_nmax("ALLEANZA VERDI SINISTRA", "PARMA")

```

# Approfondimenti

Per predire il numero di voti che ciascuna lista prenderà alle prossime
elezioni regionali in ciascuna provincia ho ipotizzato che i voti presi da
ciascuna lista seguano il modello che descrivo qui di seguito.

Ho ipotizzato che la percentuale regionale (sul totale degli elettori) della 
lista $l$ nell'elezione $t$ (trasformata attraverso la funzione 
$\operatorname{logit}$ affinché non sia vincolata tra 0 e 1) sia uguale alla 
percentuale regionale della stessa lista nell'elezione precedente ($t-1$) 
(anch'essa trasformata tramite $\operatorname{logit}$), più una quantità 
(positiva o negativa) che dipende dal tempo trascorso tra le due elezioni e da 
una "velocità" di cambiamento casuale, con una distribuzione normale e una 
deviazione standard che può variare da lista a lista (ci saranno liste più 
stabili, le cui velocità di cambiamento saranno vicine allo zero, e liste meno
stabili con velocità di cambiamento che possono discostarsi maggiormente dallo 
zero).

$$ \operatorname{logit}(P_{l,t}) = \operatorname{logit}(P_{l,t-1}) 
+ (data_t - data_{t-1}) \cdot v_{R, l, t} $$

$$ v_{R, l, t} \sim \mathcal{N}(0, \sigma_{R,l})$$

Dove 

* $P_{l,t}$ è la percentuale regionale (sul totale degli aventi diritto al voto)
della lista $l$ all'elezione $t$,
* $P_{t-1}$ è la percentuale della lista $l$ all'elezione precedente ($t-1$),
* $data_t$ e $data_{t-1}$ sono le date delle due elezioni,
* $v_{R, l, t}$ è la velocità di cambiamento della percentuale trasformata
regionale della lista $l$ tra l'elezione $t-1$ e l'elezione $t$
* $\sigma_{R,l}$ è la deviazione standard delle velocità di cambiamento della
percentuale (logit-trasformata) della lista $l$.

Ipotizzo poi che, per ciascuna provincia $p$, la percentuale provinciale 
$p_{l,p,t}$ della lista $l$ sul totale degli aventi diritto al voto 
(sempre trasformata tramite $\operatorname{logit}$) sia uguale alla 
percentuale regionale $P_{l,t}$ (trasformata) della stessa lista, più (o meno) 
una differenza $\delta_{l,p,t}$ specifica per la provincia:

$$\operatorname{logit}(p_{l,p,t}) = \operatorname{logit}(P_{l,t}) +
\delta_{l,p,t}$$

Ipotizzo infine che questa differenza possa cambiare tra un'elezione e l'altra
di una quantità che dipende dal tempo trascorso e da una "velocità" casuale
con una distribuzione normale e una deviazione standard $\sigma_{P, l}$
specifica per la lista:

$$
\delta_{l, p, t} = \delta_{l, p, t-1} + (data_t - data_{t-1}) \cdot 
v_{p, l, t}
$$


$$v_{p, l, t} \sim \mathcal{N}(0, \sigma_{P,l})$$

Dove 

* $v_{p, l, t}$ è la velocità di cambiamento di $\delta_{l,p,t}$ 
tra l'elezione $t-1$ e l'elezione $t$ nella provincia $p$,
* $\sigma_{P,l}$ è la deviazione standard della distribuzione delle velocità di 
cambiamento $v_{p, l, t}$.

In tutti questi casi considero l'astensione come una lista a sé.


Dai dati sulle elezioni precedenti ottengo quindi:

* per ciascuna lista $l$, la deviazione standard $\sigma_{R,l}$ delle velocità
di cambiamento delle percentuali regionali trasformate;
* per ciascuna lista $l$, la deviaizone standard $\sigma_{P,l}$ delle velocità
di cambiamento delle differenze tra ciascuna provincia e la regione;
* per ciascuna lista $l$, la percentuale regionale trasformata 
$\operatorname{logit}(P_{l,europee\ 2024})$ ottenuta alle ultime elezioni;
* per ciascuna lista $l$ e ciascuna provincia $p$, la differenza 
$\delta_{l,p,europee\ 2024}$ tra la percentuale trasformata provinciale e
regionale alle ultime elezioni.


Per fare una simulazione dei voti delle prossime elezioni, quindi:

1. calcolo il tempo che trascorrerà tra le elezioni europee e una probabile 
data delle prossime elezioni regionali
2. estraggo a sorte, per ciascuna lista $l$, le velocità di cambiamento
$v_{R, l, regionali\ 2024}$ delle percentuali regionali;
3. attraverso le equazioni sopra, calcolo le nuove percentuali regionali;
4. estraggo a sorte, per ciascuna lista $l$ e provincia $p$, le velocità di 
cambiamento $v_{p, l, regionali\ 2024}$ delle differenze provinciali;
5. attraverso le equazioni sopra, calcolo le nuove differenze provinciali e a 
seguire le nuove percentuali provinciali.

Le percentuali provinciali così ottenute vengono poi scalate in modo che la 
somma di tutte le percentuali della provincia faccia 1:

$$\hat{p}_{l, p, regionali\ 2024} = \frac{p_{l, p, regionali\ 2024}}
{\displaystyle{\sum_{l \in Liste } p_{l, p,  regionali\ 2024}}}$$

dove $\hat{p}_{l,p, regionali\ 2024}$ è la percentuale scalata della lista $l$
nella provincia $p$, simulata per le prossime elezioni regionali.

Quest'ultima percentuale viene poi moltiplicata per gli elettori, per ottenere
il numero di voti ricevuti da ciascuna lista in ciascuna provincia.

Con questi voti viene poi simulato uno scrutinio, seguendo quanto stabilito
dalla legge elettorale regionale.

## Serie storica dei risultati delle liste

Di seguito la serie storica di elezioni considerate. Sono mostrate le
percentuali di ciascuna lista rispetto al totale degli aventi diritto al voto.

In alcuni casi i risultati passati della lista sono basati sul risultato di 
liste affini.

I triangoli sulla destra comprendono il 95% dei risultati simulati di ciascuna
lista alle prossime elezioni.

```{r}
#| fig.width: 8
#| fig-height: 8
#| dpi: 100
#| results: hide


elettori <- 
  lista_elezione$VOTI_LISTA_REG[lista_elezione$ELEZIONE == "europee2024"][1]

votanti <- tapply(risultato$liste$VOTI_LISTA_ITER, risultato$liste$SIM, sum)
astenuti <- data.frame(
  LISTA = "astensione",
  SIM = 1:length(votanti),
  COALIZIONE = NA,
  ELETTI = NA,
  VOTI_LISTA_ITER = elettori - votanti,
  PERCENTUALE = NA,
  COLORE = liste$COLORE[liste$LISTA == "astensione"]
)
astenuti$PERCENTUALE <- formattable::percent(astenuti$PERCENTUALE, 2)
risultato$liste <- rbind(risultato$liste, astenuti)
risultato$liste$PERCENTUALE_ELETTORI <- 
  risultato$liste$VOTI_LISTA_ITER / elettori

lista_elezione <- merge(
  lista_elezione,
  liste[, c("LISTA", "COLORE")]
)

# Ordino secondo la data 
lista_elezione <- lista_elezione[order(lista_elezione$DATA),]

par(mar=c(15.1, 4.1, 4.1, 2.1), xpd=TRUE)

disegna_grafico <- function(log = FALSE) {
  # Grafico dell'andamento della percentuale in base alla data
  plot(
    PERCENTUALE * 100 ~ DATA, 
    data = lista_elezione, 
    pch = "",
    ylab = "Percentuale sugli elettori",
    xlim = c(min(DATA), data_elezione),
    ylim = c(0, 100*quantile(
      risultato$liste$PERCENTUALE_ELETTORI[risultato$liste$LISTA == "astensione"],
      0.975
    )),
    log = ifelse(log, "y", "")
  )
  tapply(lista_elezione, lista_elezione$LISTA, function(df) {
    lines(PERCENTUALE * 100 ~ DATA, data = df, col = df$COLORE, lwd = 2)
  })
  
  for (lista in liste$LISTA) {
    y0 <- 100*plogis(liste$LOG_P[liste$LISTA == lista])
    y1 <- 100*quantile(
      risultato$liste$PERCENTUALE_ELETTORI[risultato$liste$LISTA == lista],
      0.975
    )
    y2 <- 100*quantile(
      risultato$liste$PERCENTUALE_ELETTORI[risultato$liste$LISTA == lista],
      0.025
    )
    polygon(
      c(liste$DATA[liste$LISTA == lista], data_elezione, data_elezione),
      c(y0, y1, y2),
      border = liste$COLORE[liste$LISTA == lista],
      col = adjustcolor(liste$COLORE[liste$LISTA == lista], alpha.f = 0.5)
    )
  }
  
  legend(
    "bottomleft", 
    inset=c(0,-0.6), 
    legend=liste$LISTA, 
    lwd = 2, 
    col = liste$COLORE,
    ncol = 2
  )
}

disegna_grafico()

```



